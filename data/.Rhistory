install.packages(knitr)
install.packages("knitr")
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
install.packages('knitr')
utils:::menuInstallPkgs()
options(CRAN = c(getOption("CRAN"), "http://www.omegahat.org/R"))
install.packages("Rstem")
library(tm)
library(kernlab)
library(Rstem)
library(Snowball) 
utils:::menuInstallPkgs()
dir <- "E:\Github\webmining\data"
setwd(dir)
dir <- "E:\\Github\\webmining\\data"
setwd(dir)
library(Snowball)
?read.csv
train_raw <- read.csv("train.csv", header = TRUE, sep = ",")
str(train_raw)
train_raw <- read.table("train.csv", header = TRUE, sep = ",", stringAsFactors = FALSE)
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, as.is = !stringAsFactors())
train_raw <- read.csv("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", quote = "\", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", quote = "\,", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", quote = "\,", as.is = !stringAsFactors())
train_raw <- read.csv("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", as.is = !stringAsFactors())
train_raw <- read.table("train.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(train_raw)
train_tweet <- train_raw[,1:4] #id, tweet, state, location
train_label <- train_raw[,5:28] #sentiment, when, weather
head(train_tweet)
head(train_label)
train <- Corpus(train_tweet, readerControl=list(language="eng"))
?Corpus
train <- Corpus(x=train_tweet, readerControl=list(language="eng"))
mode(train)
mode(train_tweet)
train <- Corpus(VectorSource(train_tweet))
mode(train)
train <- tm_map(train,stripWhitespace) #strip white space
train <- tm_map(train, tolower)
#Remove Stopwords
train <- tm_map(train, removeWords,stopwords("english"))
tm_map(train,stemDocument) 
#Create Document Term Matrix
dtm <- DocumentTermMatrix(train)
inspect(dtm[1:10,1:10])
findFreqTerms(dtm, 50) #View terms that appear atleast 50 times
findAssocs(dtm,"sunny",0.8) #what words show up in correlation with the term "senators". It appears many negative terms
q()
library(tm)
library(Rstem)
library(Snowball)
library(kernlab)
head(dtm)
str(dtm)
?TermDocumentMatrix
dtm2 <- DocumentTermMatrix(train,  #dtm2 with weightTfIdf
                          control = list(weighting =
                                         function(x)
                                         weightTfIdf(x, normalize =
                                                     FALSE),
                                         stopwords = TRUE),
 removePunctuation = TRUE)
dtm2 <- DocumentTermMatrix(train,  #dtm2 with weightTfIdf
                          control = list(weighting =
                                         function(x)
                                         weightTfIdf(x, normalize =
                                                     FALSE),
                                         stopwords = TRUE,
 removePunctuation = TRUE)
)
str(dtm2)
dim(dtm2)
as.matrix(dtm2)
#Create the Kernel
rbfkernel <- rbfdot(sigma = 0.1)
#Create the kernel matrix
kernmat <- kernelMatrix(kernel=rbfkernel,x=as.matrix(dtm2))
sk <- stringdot(type="string",length=3) 
kernstring <- kernelMatrix(kernel=sk,x=as.matrix(dtm2))
mode(sk)
sk <- stringdot(type="string",length=3)
class(sk) <- "kernel"
kernstring <- kernelMatrix(kernel=sk,x=as.matrix(dtm2))
q()
